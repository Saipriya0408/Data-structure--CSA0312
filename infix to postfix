#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

// Stack structure for holding operators
typedef struct Stack {
    char* arr;
    int top;
    int capacity;
} Stack;

// Function to create a stack of a given capacity
Stack* createStack(int capacity) {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->arr = (char*)malloc(stack->capacity * sizeof(char));
    return stack;
}

// Function to check if the stack is empty
int isEmpty(Stack* stack) {
    return stack->top == -1;
}

// Function to peek the top element of the stack
char peek(Stack* stack) {
    return stack->arr[stack->top];
}

// Function to pop an element from the stack
char pop(Stack* stack) {
    if (isEmpty(stack)) {
        return -1;  // Stack is empty
    }
    return stack->arr[stack->top--];
}

// Function to push an element to the stack
void push(Stack* stack, char op) {
    stack->arr[++stack->top] = op;
}

// Function to check operator precedence
int precedence(char op) {
    if (op == '+' || op == '-') {
        return 1;
    } else if (op == '*' || op == '/') {
        return 2;
    }
    return 0;
}

// Function to perform infix to postfix conversion
void infixToPostfix(char* infix, char* postfix) {
    Stack* stack = createStack(strlen(infix));
    int k = 0;  // Index for postfix expression

    for (int i = 0; infix[i] != '\0'; i++) {
        char current = infix[i];

        // If the current character is an operand, add it to postfix
        if (isalnum(current)) {
            postfix[k++] = current;
        }
        // If the current character is '(', push it to the stack
        else if (current == '(') {
            push(stack, current);
        }
        // If the current character is ')', pop until '(' is found
        else if (current == ')') {
            while (!isEmpty(stack) && peek(stack) != '(') {
                postfix[k++] = pop(stack);
            }
            pop(stack);  // Pop '(' from stack
        }
        // If the current character is an operator
        else {
            while (!isEmpty(stack) && precedence(peek(stack)) >= precedence(current)) {
                postfix[k++] = pop(stack);
            }
            push(stack, current);
        }
    }

    // Pop any remaining operators from the stack
    while (!isEmpty(stack)) {
        postfix[k++] = pop(stack);
    }
    postfix[k] = '\0';  // Null terminate the postfix expression

    // Clean up memory used for the stack
    free(stack->arr);
    free(stack);
}

int main() {
    char infix[100], postfix[100];

    printf("Enter an infix expression: ");
    gets(infix);  // Read input infix expression

    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);

    return 0;
}
