#include <stdio.h>
#include <stdlib.h>

// Define the structure for tree nodes
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Preorder traversal
void preorder(struct Node* root) {
    if (root == NULL) return;
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}

// Inorder traversal
void inorder(struct Node* root) {
    if (root == NULL) return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

// Postorder traversal
void postorder(struct Node* root) {
    if (root == NULL) return;
    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->data);
}

// Level order traversal using a queue
void levelOrder(struct Node* root) {
    if (root == NULL) return;

    // Create an array to act as a queue
    struct Node* queue[100];
    int front = 0, rear = 0;

    // Enqueue the root node
    queue[rear++] = root;

    // Process nodes in the queue
    while (front < rear) {
        struct Node* current = queue[front++];

        // Print the current node
        printf("%d ", current->data);

        // Enqueue the left child
        if (current->left != NULL)
            queue[rear++] = current->left;

        // Enqueue the right child
        if (current->right != NULL)
            queue[rear++] = current->right;
    }
}

// Main function to demonstrate traversals
int main() {
    // Construct the binary tree
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    printf("Preorder traversal: ");
    preorder(root);
    printf("\n");

    printf("Inorder traversal: ");
    inorder(root);
    printf("\n");

    printf("Postorder traversal: ");
    postorder(root);
    printf("\n");

    printf("Level Order traversal: ");
    levelOrder(root);
    printf("\n");

    return 0;
}
